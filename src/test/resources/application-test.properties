server.servlet.context-path=/multi/data/source/api

spring.jpa.database=default


# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
bank.datasource.url=jdbc:sqlserver://****;databaseName=****
bank.datasource.username=****
bank.datasource.password=****
bank.datasource.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver

user.datasource.url=jdbc:mysql://localhost:3306/****?serverTimezone=UCT
user.datasource.username=****
user.datasource.password=****
user.datasource.driverClassName=com.mysql.cj.jdbc.Driver

official.user.datasource.url=jdbc:oracle:thin:****
official.user.datasource.username=****
official.user.datasource.password=****
official.user.datasource.driverClassName=oracle.jdbc.driver.OracleDriver

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=none
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.SQLServerDialect

#It is useful because from Spring Boot 2.1 and above bean overriding is disabled by default
spring.main.allow-bean-definition-overriding=true


# =================================
# WIREMOCK
# =================================

wiremock.server.host=172.16.3.157
wiremock.server.port=8888
wiremock.server.scheme=http
